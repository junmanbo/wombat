// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { ExchangesReadExchangesData, ExchangesReadExchangesResponse, ExchangesCreateExchangeData, ExchangesCreateExchangeResponse, ExchangesReadExchangeByIdData, ExchangesReadExchangeByIdResponse, ExchangesUpdateExchangeData, ExchangesUpdateExchangeResponse, ExchangesDeleteExchangeData, ExchangesDeleteExchangeResponse, ExchangesReadExchangeByCodeData, ExchangesReadExchangeByCodeResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PriceDataReadPriceDataBySymbolData, PriceDataReadPriceDataBySymbolResponse, PriceDataDeletePriceDataBySymbolData, PriceDataDeletePriceDataBySymbolResponse, PriceDataReadLatestPriceDataData, PriceDataReadLatestPriceDataResponse, PriceDataCreatePriceDataData, PriceDataCreatePriceDataResponse, PriceDataBulkCreatePriceDataData, PriceDataBulkCreatePriceDataResponse, PriceDataReadPriceDataByIdData, PriceDataReadPriceDataByIdResponse, PriceDataUpdatePriceDataData, PriceDataUpdatePriceDataResponse, PriceDataDeletePriceDataData, PriceDataDeletePriceDataResponse, PrivateCreateUserData, PrivateCreateUserResponse, SymbolsReadSymbolsData, SymbolsReadSymbolsResponse, SymbolsCreateSymbolData, SymbolsCreateSymbolResponse, SymbolsReadSymbolsByExchangeData, SymbolsReadSymbolsByExchangeResponse, SymbolsReadSymbolByIdData, SymbolsReadSymbolByIdResponse, SymbolsUpdateSymbolData, SymbolsUpdateSymbolResponse, SymbolsDeleteSymbolData, SymbolsDeleteSymbolResponse, UserApiKeysReadUserApiKeysData, UserApiKeysReadUserApiKeysResponse, UserApiKeysCreateUserApiKeyData, UserApiKeysCreateUserApiKeyResponse, UserApiKeysReadUserApiKeyByExchangeData, UserApiKeysReadUserApiKeyByExchangeResponse, UserApiKeysReadUserApiKeyByIdData, UserApiKeysReadUserApiKeyByIdResponse, UserApiKeysUpdateUserApiKeyData, UserApiKeysUpdateUserApiKeyResponse, UserApiKeysDeleteUserApiKeyData, UserApiKeysDeleteUserApiKeyResponse, UserApiKeysDeactivateUserApiKeyData, UserApiKeysDeactivateUserApiKeyResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class ExchangesService {
    /**
     * Read Exchanges
     * Retrieve exchanges.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns ExchangesPublic Successful Response
     * @throws ApiError
     */
    public static readExchanges(data: ExchangesReadExchangesData = {}): CancelablePromise<ExchangesReadExchangesResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/exchanges/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Exchange
     * Create new exchange.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ExchangePublic Successful Response
     * @throws ApiError
     */
    public static createExchange(data: ExchangesCreateExchangeData): CancelablePromise<ExchangesCreateExchangeResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/exchanges/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Exchange By Id
     * Get a specific exchange by id.
     * @param data The data for the request.
     * @param data.exchangeId
     * @returns ExchangePublic Successful Response
     * @throws ApiError
     */
    public static readExchangeById(data: ExchangesReadExchangeByIdData): CancelablePromise<ExchangesReadExchangeByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/exchanges/{exchange_id}',
            path: {
                exchange_id: data.exchangeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Exchange
     * Update an exchange.
     * @param data The data for the request.
     * @param data.exchangeId
     * @param data.requestBody
     * @returns ExchangePublic Successful Response
     * @throws ApiError
     */
    public static updateExchange(data: ExchangesUpdateExchangeData): CancelablePromise<ExchangesUpdateExchangeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/exchanges/{exchange_id}',
            path: {
                exchange_id: data.exchangeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Exchange
     * Delete an exchange.
     * @param data The data for the request.
     * @param data.exchangeId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteExchange(data: ExchangesDeleteExchangeData): CancelablePromise<ExchangesDeleteExchangeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/exchanges/{exchange_id}',
            path: {
                exchange_id: data.exchangeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Exchange By Code
     * Get a specific exchange by code.
     * @param data The data for the request.
     * @param data.code
     * @returns ExchangePublic Successful Response
     * @throws ApiError
     */
    public static readExchangeByCode(data: ExchangesReadExchangeByCodeData): CancelablePromise<ExchangesReadExchangeByCodeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/exchanges/code/{code}',
            path: {
                code: data.code
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PriceDataService {
    /**
     * Read Price Data By Symbol
     * 특정 종목의 가격 데이터 조회
     *
     * 시간 범위를 지정하여 필터링 가능
     * @param data The data for the request.
     * @param data.symbolId
     * @param data.timeframe 시간 프레임 (예: 1d, 1h, 5m)
     * @param data.startTime 시작 시간 (ISO 8601 형식)
     * @param data.endTime 종료 시간 (ISO 8601 형식)
     * @param data.skip
     * @param data.limit
     * @returns PriceDataListPublic Successful Response
     * @throws ApiError
     */
    public static readPriceDataBySymbol(data: PriceDataReadPriceDataBySymbolData): CancelablePromise<PriceDataReadPriceDataBySymbolResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/price-data/symbol/{symbol_id}',
            path: {
                symbol_id: data.symbolId
            },
            query: {
                timeframe: data.timeframe,
                start_time: data.startTime,
                end_time: data.endTime,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Price Data By Symbol
     * 특정 종목의 가격 데이터 삭제
     *
     * timeframe을 지정하지 않으면 해당 종목의 모든 가격 데이터를 삭제합니다
     * @param data The data for the request.
     * @param data.symbolId
     * @param data.timeframe 특정 timeframe만 삭제 (지정 안하면 모든 timeframe 삭제)
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deletePriceDataBySymbol(data: PriceDataDeletePriceDataBySymbolData): CancelablePromise<PriceDataDeletePriceDataBySymbolResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/price-data/symbol/{symbol_id}',
            path: {
                symbol_id: data.symbolId
            },
            query: {
                timeframe: data.timeframe
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Latest Price Data
     * 특정 종목의 가장 최신 가격 데이터 조회
     * @param data The data for the request.
     * @param data.symbolId
     * @param data.timeframe 시간 프레임 (예: 1d, 1h, 5m)
     * @returns PriceDataPublic Successful Response
     * @throws ApiError
     */
    public static readLatestPriceData(data: PriceDataReadLatestPriceDataData): CancelablePromise<PriceDataReadLatestPriceDataResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/price-data/symbol/{symbol_id}/latest',
            path: {
                symbol_id: data.symbolId
            },
            query: {
                timeframe: data.timeframe
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Price Data
     * 새로운 가격 데이터 생성
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PriceDataPublic Successful Response
     * @throws ApiError
     */
    public static createPriceData(data: PriceDataCreatePriceDataData): CancelablePromise<PriceDataCreatePriceDataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/price-data/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk Create Price Data
     * 가격 데이터 대량 생성
     *
     * 중복된 데이터는 자동으로 스킵됩니다 (unique constraint 위반 방지)
     * @param data The data for the request.
     * @param data.requestBody
     * @returns PriceDataListPublic Successful Response
     * @throws ApiError
     */
    public static bulkCreatePriceData(data: PriceDataBulkCreatePriceDataData): CancelablePromise<PriceDataBulkCreatePriceDataResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/price-data/bulk',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Price Data By Id
     * ID로 가격 데이터 조회
     * @param data The data for the request.
     * @param data.priceDataId
     * @returns PriceDataPublic Successful Response
     * @throws ApiError
     */
    public static readPriceDataById(data: PriceDataReadPriceDataByIdData): CancelablePromise<PriceDataReadPriceDataByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/price-data/{price_data_id}',
            path: {
                price_data_id: data.priceDataId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Price Data
     * 가격 데이터 업데이트
     *
     * 주의: 일반적으로 가격 데이터는 불변이므로 이 API는 신중하게 사용해야 합니다
     * @param data The data for the request.
     * @param data.priceDataId
     * @param data.requestBody
     * @returns PriceDataPublic Successful Response
     * @throws ApiError
     */
    public static updatePriceData(data: PriceDataUpdatePriceDataData): CancelablePromise<PriceDataUpdatePriceDataResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/price-data/{price_data_id}',
            path: {
                price_data_id: data.priceDataId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Price Data
     * 가격 데이터 삭제
     * @param data The data for the request.
     * @param data.priceDataId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deletePriceData(data: PriceDataDeletePriceDataData): CancelablePromise<PriceDataDeletePriceDataResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/price-data/{price_data_id}',
            path: {
                price_data_id: data.priceDataId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class SymbolsService {
    /**
     * Read Symbols
     * Retrieve symbols.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns SymbolsPublic Successful Response
     * @throws ApiError
     */
    public static readSymbols(data: SymbolsReadSymbolsData = {}): CancelablePromise<SymbolsReadSymbolsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/symbols/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Symbol
     * Create new symbol.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SymbolPublic Successful Response
     * @throws ApiError
     */
    public static createSymbol(data: SymbolsCreateSymbolData): CancelablePromise<SymbolsCreateSymbolResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/symbols/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Symbols By Exchange
     * Retrieve symbols by exchange.
     * @param data The data for the request.
     * @param data.exchangeId
     * @param data.skip
     * @param data.limit
     * @returns SymbolsPublic Successful Response
     * @throws ApiError
     */
    public static readSymbolsByExchange(data: SymbolsReadSymbolsByExchangeData): CancelablePromise<SymbolsReadSymbolsByExchangeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/symbols/exchange/{exchange_id}',
            path: {
                exchange_id: data.exchangeId
            },
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Symbol By Id
     * Get a specific symbol by id.
     * @param data The data for the request.
     * @param data.symbolId
     * @returns SymbolPublic Successful Response
     * @throws ApiError
     */
    public static readSymbolById(data: SymbolsReadSymbolByIdData): CancelablePromise<SymbolsReadSymbolByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/symbols/{symbol_id}',
            path: {
                symbol_id: data.symbolId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Symbol
     * Update a symbol.
     * @param data The data for the request.
     * @param data.symbolId
     * @param data.requestBody
     * @returns SymbolPublic Successful Response
     * @throws ApiError
     */
    public static updateSymbol(data: SymbolsUpdateSymbolData): CancelablePromise<SymbolsUpdateSymbolResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/symbols/{symbol_id}',
            path: {
                symbol_id: data.symbolId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Symbol
     * Delete a symbol.
     * @param data The data for the request.
     * @param data.symbolId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteSymbol(data: SymbolsDeleteSymbolData): CancelablePromise<SymbolsDeleteSymbolResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/symbols/{symbol_id}',
            path: {
                symbol_id: data.symbolId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UserApiKeysService {
    /**
     * Read User Api Keys
     * Retrieve current user's API keys.
     *
     * Returns list of API keys WITHOUT decrypted credentials.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UserApiKeysPublic Successful Response
     * @throws ApiError
     */
    public static readUserApiKeys(data: UserApiKeysReadUserApiKeysData = {}): CancelablePromise<UserApiKeysReadUserApiKeysResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user-api-keys/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User Api Key
     * Create a new API key for the current user.
     *
     * IMPORTANT: Send plain text API key and secret in the request.
     * They will be encrypted before storage.
     *
     * Request body example:
     * ```json
     * {
     * "exchange_type": "KIS",
     * "encrypted_api_key": "plain_api_key_here",
     * "encrypted_api_secret": "plain_api_secret_here",
     * "account_number": "12345678",
     * "is_demo": true,
     * "nickname": "My Demo Account"
     * }
     * ```
     *
     * Note: Despite the field names, send PLAIN TEXT credentials.
     * The encryption happens server-side.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserApiKeyPublic Successful Response
     * @throws ApiError
     */
    public static createUserApiKey(data: UserApiKeysCreateUserApiKeyData): CancelablePromise<UserApiKeysCreateUserApiKeyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-api-keys/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Api Key By Exchange
     * Get current user's active API key for a specific exchange.
     *
     * Args:
     * exchange_type: Exchange type (e.g., 'KIS', 'UPBIT')
     * is_demo: Whether to get demo or production key (default: False)
     *
     * Returns:
     * API key WITHOUT decrypted credentials
     * @param data The data for the request.
     * @param data.exchangeType
     * @param data.isDemo
     * @returns UserApiKeyPublic Successful Response
     * @throws ApiError
     */
    public static readUserApiKeyByExchange(data: UserApiKeysReadUserApiKeyByExchangeData): CancelablePromise<UserApiKeysReadUserApiKeyByExchangeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user-api-keys/exchange/{exchange_type}',
            path: {
                exchange_type: data.exchangeType
            },
            query: {
                is_demo: data.isDemo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Api Key By Id
     * Get a specific API key by ID.
     *
     * Returns API key WITHOUT decrypted credentials.
     * Only the owner can access their own keys.
     * @param data The data for the request.
     * @param data.apiKeyId
     * @returns UserApiKeyPublic Successful Response
     * @throws ApiError
     */
    public static readUserApiKeyById(data: UserApiKeysReadUserApiKeyByIdData): CancelablePromise<UserApiKeysReadUserApiKeyByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/user-api-keys/{api_key_id}',
            path: {
                api_key_id: data.apiKeyId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User Api Key
     * Update an API key.
     *
     * Can update:
     * - API credentials (will be re-encrypted)
     * - Account number
     * - Nickname
     * - is_demo flag
     * - is_active flag
     *
     * IMPORTANT: If updating credentials, send plain text.
     * They will be encrypted before storage.
     * @param data The data for the request.
     * @param data.apiKeyId
     * @param data.requestBody
     * @returns UserApiKeyPublic Successful Response
     * @throws ApiError
     */
    public static updateUserApiKey(data: UserApiKeysUpdateUserApiKeyData): CancelablePromise<UserApiKeysUpdateUserApiKeyResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/user-api-keys/{api_key_id}',
            path: {
                api_key_id: data.apiKeyId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User Api Key
     * Permanently delete an API key.
     *
     * WARNING: This action cannot be undone.
     * Consider using the deactivate endpoint instead.
     * @param data The data for the request.
     * @param data.apiKeyId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserApiKey(data: UserApiKeysDeleteUserApiKeyData): CancelablePromise<UserApiKeysDeleteUserApiKeyResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/user-api-keys/{api_key_id}',
            path: {
                api_key_id: data.apiKeyId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Deactivate User Api Key
     * Deactivate an API key (soft delete).
     *
     * Deactivated keys are kept in the database but cannot be used.
     * @param data The data for the request.
     * @param data.apiKeyId
     * @returns UserApiKeyPublic Successful Response
     * @throws ApiError
     */
    public static deactivateUserApiKey(data: UserApiKeysDeactivateUserApiKeyData): CancelablePromise<UserApiKeysDeactivateUserApiKeyResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/user-api-keys/{api_key_id}/deactivate',
            path: {
                api_key_id: data.apiKeyId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
    
}