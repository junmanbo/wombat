// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type ExchangeCreate = {
    code: string;
    name: string;
    country?: (string | null);
    timezone?: (string | null);
    is_active?: boolean;
};

export type ExchangePublic = {
    code: string;
    name: string;
    country?: (string | null);
    timezone?: (string | null);
    is_active?: boolean;
    id: number;
    created_at: string;
};

export type ExchangesPublic = {
    data: Array<ExchangePublic>;
    count: number;
};

export type ExchangeUpdate = {
    code?: (string | null);
    name?: (string | null);
    country?: (string | null);
    timezone?: (string | null);
    is_active?: (boolean | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PriceDataCreate = {
    symbol_id: number;
    timestamp: string;
    open_price: (number | string);
    high_price: (number | string);
    low_price: (number | string);
    close_price: (number | string);
    volume: (number | string);
    quote_volume?: (number | string | null);
    timeframe: string;
};

export type PriceDataListPublic = {
    data: Array<PriceDataPublic>;
    count: number;
};

export type PriceDataPublic = {
    symbol_id: number;
    timestamp: string;
    open_price: string;
    high_price: string;
    low_price: string;
    close_price: string;
    volume: string;
    quote_volume?: (string | null);
    timeframe: string;
    id: number;
    created_at: string;
};

export type PriceDataUpdate = {
    symbol_id?: (number | null);
    timestamp?: (string | null);
    open_price?: (number | string | null);
    high_price?: (number | string | null);
    low_price?: (number | string | null);
    close_price?: (number | string | null);
    volume?: (number | string | null);
    quote_volume?: (number | string | null);
    timeframe?: (string | null);
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type SymbolCreate = {
    exchange_id: number;
    symbol: string;
    base_asset?: (string | null);
    quote_asset?: (string | null);
    symbol_type: string;
    market?: (string | null);
    is_active?: boolean;
    min_order_size?: (number | string | null);
    max_order_size?: (number | string | null);
    price_precision?: number;
    quantity_precision?: number;
};

export type SymbolPublic = {
    exchange_id: number;
    symbol: string;
    base_asset?: (string | null);
    quote_asset?: (string | null);
    symbol_type: string;
    market?: (string | null);
    is_active?: boolean;
    min_order_size?: (string | null);
    max_order_size?: (string | null);
    price_precision?: number;
    quantity_precision?: number;
    id: number;
    created_at: string;
    updated_at: string;
};

export type SymbolsPublic = {
    data: Array<SymbolPublic>;
    count: number;
};

export type SymbolUpdate = {
    exchange_id?: (number | null);
    symbol?: (string | null);
    base_asset?: (string | null);
    quote_asset?: (string | null);
    symbol_type?: (string | null);
    market?: (string | null);
    is_active?: (boolean | null);
    min_order_size?: (number | string | null);
    max_order_size?: (number | string | null);
    price_precision?: (number | null);
    quantity_precision?: (number | null);
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserApiKeyCreate = {
    exchange_type: string;
    encrypted_api_key: string;
    encrypted_api_secret: string;
    account_number?: (string | null);
    is_demo?: boolean;
    is_active?: boolean;
    nickname?: (string | null);
};

/**
 * API 응답용 모델 (민감한 정보 제외)
 *
 * 주의: 암호화된 키/시크릿은 절대 클라이언트에 노출하지 않음
 */
export type UserApiKeyPublic = {
    id: number;
    user_id: string;
    exchange_type: string;
    account_number: (string | null);
    is_demo: boolean;
    is_active: boolean;
    nickname: (string | null);
    created_at: string;
    updated_at: string;
};

export type UserApiKeysPublic = {
    data: Array<UserApiKeyPublic>;
    count: number;
};

export type UserApiKeyUpdate = {
    exchange_type?: (string | null);
    encrypted_api_key?: (string | null);
    encrypted_api_secret?: (string | null);
    account_number?: (string | null);
    is_demo?: (boolean | null);
    is_active?: (boolean | null);
    nickname?: (string | null);
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ExchangesReadExchangesData = {
    limit?: number;
    skip?: number;
};

export type ExchangesReadExchangesResponse = (ExchangesPublic);

export type ExchangesCreateExchangeData = {
    requestBody: ExchangeCreate;
};

export type ExchangesCreateExchangeResponse = (ExchangePublic);

export type ExchangesReadExchangeByIdData = {
    exchangeId: number;
};

export type ExchangesReadExchangeByIdResponse = (ExchangePublic);

export type ExchangesUpdateExchangeData = {
    exchangeId: number;
    requestBody: ExchangeUpdate;
};

export type ExchangesUpdateExchangeResponse = (ExchangePublic);

export type ExchangesDeleteExchangeData = {
    exchangeId: number;
};

export type ExchangesDeleteExchangeResponse = (Message);

export type ExchangesReadExchangeByCodeData = {
    code: string;
};

export type ExchangesReadExchangeByCodeResponse = (ExchangePublic);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PriceDataReadPriceDataBySymbolData = {
    /**
     * 종료 시간 (ISO 8601 형식)
     */
    endTime?: (string | null);
    limit?: number;
    skip?: number;
    /**
     * 시작 시간 (ISO 8601 형식)
     */
    startTime?: (string | null);
    symbolId: number;
    /**
     * 시간 프레임 (예: 1d, 1h, 5m)
     */
    timeframe: string;
};

export type PriceDataReadPriceDataBySymbolResponse = (PriceDataListPublic);

export type PriceDataDeletePriceDataBySymbolData = {
    symbolId: number;
    /**
     * 특정 timeframe만 삭제 (지정 안하면 모든 timeframe 삭제)
     */
    timeframe?: (string | null);
};

export type PriceDataDeletePriceDataBySymbolResponse = (Message);

export type PriceDataReadLatestPriceDataData = {
    symbolId: number;
    /**
     * 시간 프레임 (예: 1d, 1h, 5m)
     */
    timeframe: string;
};

export type PriceDataReadLatestPriceDataResponse = (PriceDataPublic);

export type PriceDataCreatePriceDataData = {
    requestBody: PriceDataCreate;
};

export type PriceDataCreatePriceDataResponse = (PriceDataPublic);

export type PriceDataBulkCreatePriceDataData = {
    requestBody: Array<PriceDataCreate>;
};

export type PriceDataBulkCreatePriceDataResponse = (PriceDataListPublic);

export type PriceDataReadPriceDataByIdData = {
    priceDataId: number;
};

export type PriceDataReadPriceDataByIdResponse = (PriceDataPublic);

export type PriceDataUpdatePriceDataData = {
    priceDataId: number;
    requestBody: PriceDataUpdate;
};

export type PriceDataUpdatePriceDataResponse = (PriceDataPublic);

export type PriceDataDeletePriceDataData = {
    priceDataId: number;
};

export type PriceDataDeletePriceDataResponse = (Message);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type SymbolsReadSymbolsData = {
    limit?: number;
    skip?: number;
};

export type SymbolsReadSymbolsResponse = (SymbolsPublic);

export type SymbolsCreateSymbolData = {
    requestBody: SymbolCreate;
};

export type SymbolsCreateSymbolResponse = (SymbolPublic);

export type SymbolsReadSymbolsByExchangeData = {
    exchangeId: number;
    limit?: number;
    skip?: number;
};

export type SymbolsReadSymbolsByExchangeResponse = (SymbolsPublic);

export type SymbolsReadSymbolByIdData = {
    symbolId: number;
};

export type SymbolsReadSymbolByIdResponse = (SymbolPublic);

export type SymbolsUpdateSymbolData = {
    requestBody: SymbolUpdate;
    symbolId: number;
};

export type SymbolsUpdateSymbolResponse = (SymbolPublic);

export type SymbolsDeleteSymbolData = {
    symbolId: number;
};

export type SymbolsDeleteSymbolResponse = (Message);

export type UserApiKeysReadUserApiKeysData = {
    limit?: number;
    skip?: number;
};

export type UserApiKeysReadUserApiKeysResponse = (UserApiKeysPublic);

export type UserApiKeysCreateUserApiKeyData = {
    requestBody: UserApiKeyCreate;
};

export type UserApiKeysCreateUserApiKeyResponse = (UserApiKeyPublic);

export type UserApiKeysReadUserApiKeyByExchangeData = {
    exchangeType: string;
    isDemo?: boolean;
};

export type UserApiKeysReadUserApiKeyByExchangeResponse = (UserApiKeyPublic);

export type UserApiKeysReadUserApiKeyByIdData = {
    apiKeyId: number;
};

export type UserApiKeysReadUserApiKeyByIdResponse = (UserApiKeyPublic);

export type UserApiKeysUpdateUserApiKeyData = {
    apiKeyId: number;
    requestBody: UserApiKeyUpdate;
};

export type UserApiKeysUpdateUserApiKeyResponse = (UserApiKeyPublic);

export type UserApiKeysDeleteUserApiKeyData = {
    apiKeyId: number;
};

export type UserApiKeysDeleteUserApiKeyResponse = (Message);

export type UserApiKeysDeactivateUserApiKeyData = {
    apiKeyId: number;
};

export type UserApiKeysDeactivateUserApiKeyResponse = (UserApiKeyPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);